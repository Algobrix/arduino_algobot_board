!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/semir/Dropbox/MicroBitDesign/MCU/projects/young-engineers/arduino-versions/arduino-algoc/portable/packages/Algobrain/hardware/avr/0.1.0/libraries/Tangible_and_GoAlgo/examples/Tangible_and_GoAlgo_Firmware/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
ALGOSENSOR_TYPE	sensor.h	/^enum ALGOSENSOR_TYPE$/;"	g
ALGOSENSOR_TYPE_1WIRE	sensor.h	/^    ALGOSENSOR_TYPE_1WIRE,$/;"	e	enum:ALGOSENSOR_TYPE
ALGOSENSOR_TYPE_PWM	sensor.h	/^    ALGOSENSOR_TYPE_PWM = 0x00,$/;"	e	enum:ALGOSENSOR_TYPE
BACKWARDS	sequences.h	/^#define BACKWARDS /;"	d
BLE_BAUDRATE	comHandler.h	/^#define BLE_BAUDRATE /;"	d
BLE_EN_PIN	pinout.h	/^#define BLE_EN_PIN /;"	d
BLE_UART	comHandler.h	/^#define BLE_UART /;"	d
Button	userInterface.cpp	/^Button::Button(uint8_t buttonPin, uint8_t ledPin) {$/;"	f	class:Button
Button	userInterface.h	/^class Button {$/;"	c
CCW	motor.h	/^#define CCW /;"	d
CUSTOM_LEVEL1_MAX	config.h	/^#define CUSTOM_LEVEL1_MAX /;"	d
CUSTOM_LEVEL1_MIN	config.h	/^#define CUSTOM_LEVEL1_MIN /;"	d
CUSTOM_LEVEL2_MAX	config.h	/^#define CUSTOM_LEVEL2_MAX /;"	d
CUSTOM_LEVEL2_MIN	config.h	/^#define CUSTOM_LEVEL2_MIN /;"	d
CUSTOM_LEVEL3_MAX	config.h	/^#define CUSTOM_LEVEL3_MAX /;"	d
CUSTOM_LEVEL3_MIN	config.h	/^#define CUSTOM_LEVEL3_MIN /;"	d
CW	motor.h	/^#define CW /;"	d
CYCLE_TIME	sensor.h	/^#define CYCLE_TIME /;"	d
ComHandler	comHandler.cpp	/^ComHandler::ComHandler() $/;"	f	class:ComHandler
ComHandler	comHandler.h	/^class ComHandler {$/;"	c
DATA_BYTES_SIZE	scriptRow.h	/^#define DATA_BYTES_SIZE /;"	d
DURATION_MULTIPLIER	runTime.h	/^#define DURATION_MULTIPLIER /;"	d
END_OF_MESSAGE_SYMBOL_1	comHandler.h	/^#define END_OF_MESSAGE_SYMBOL_1 /;"	d
END_OF_MESSAGE_SYMBOL_2	comHandler.h	/^#define END_OF_MESSAGE_SYMBOL_2 /;"	d
END_OF_MESSAGE_SYMBOL_3	comHandler.h	/^#define END_OF_MESSAGE_SYMBOL_3 /;"	d
FIRMWARE_VERSION	fwver.h	/^#define FIRMWARE_VERSION	/;"	d
FIRMWARE_VERSION_EVERY_X_MILLIS	userInterface.h	/^#define FIRMWARE_VERSION_EVERY_X_MILLIS /;"	d
FORWARD	sequences.h	/^#define FORWARD /;"	d
ISR	motorEncoders.cpp	/^ISR(TIMER1_COMPA_vect) $/;"	f
ISR	motorEncoders.cpp	/^ISR(TIMER2_COMPA_vect) $/;"	f
ISR	motorEncoders.cpp	/^ISR(TIMER2_COMPB_vect) $/;"	f
ISR	motorEncoders.cpp	/^ISR(TIMER3_COMPA_vect) $/;"	f
ISR	motorEncoders.cpp	/^ISR(TIMER4_COMPA_vect) $/;"	f
LED_A_PIN	pinout.h	/^#define LED_A_PIN /;"	d
LED_BLINK_TIME_MILLIS	userInterface.h	/^#define LED_BLINK_TIME_MILLIS /;"	d
LED_B_PIN	pinout.h	/^#define LED_B_PIN /;"	d
LEFT	sequences.h	/^#define LEFT /;"	d
Led	led.cpp	/^Led::Led(byte pin)$/;"	f	class:Led
Led	led.h	/^class Led {$/;"	c
MAIN_H	main.h	/^#define	MAIN_H$/;"	d
MAX_TIME_VALUE	runTime.h	/^#define MAX_TIME_VALUE /;"	d
MESSAGE_BUFFER_COM_PORT	comHandler.h	/^#define MESSAGE_BUFFER_COM_PORT /;"	d
MESSAGE_BUFFER_CUBE_TYPE	comHandler.h	/^#define MESSAGE_BUFFER_CUBE_TYPE /;"	d
MESSAGE_BUFFER_LEVEL	comHandler.h	/^#define MESSAGE_BUFFER_LEVEL /;"	d
MESSAGE_BUFFER_OP_COMMAND	comHandler.h	/^#define MESSAGE_BUFFER_OP_COMMAND /;"	d
MESSAGE_BUFFER_PARAMETERS	comHandler.h	/^#define MESSAGE_BUFFER_PARAMETERS /;"	d
MESSAGE_BUFFER_ROW	comHandler.h	/^#define MESSAGE_BUFFER_ROW /;"	d
MESSAGE_BUFFER_THREAD	comHandler.h	/^#define MESSAGE_BUFFER_THREAD /;"	d
MIN_TIME_VALUE	runTime.h	/^#define MIN_TIME_VALUE /;"	d
MOTOR_A_DIR	pinout.h	/^#define MOTOR_A_DIR /;"	d
MOTOR_A_ENCODER	pinout.h	/^#define MOTOR_A_ENCODER /;"	d
MOTOR_A_PWM	pinout.h	/^#define MOTOR_A_PWM /;"	d
MOTOR_B_DIR	pinout.h	/^#define MOTOR_B_DIR /;"	d
MOTOR_B_ENCODER	pinout.h	/^#define MOTOR_B_ENCODER /;"	d
MOTOR_B_PWM	pinout.h	/^#define MOTOR_B_PWM /;"	d
MOTOR_C_DIR	pinout.h	/^#define MOTOR_C_DIR /;"	d
MOTOR_C_ENCODER	pinout.h	/^#define MOTOR_C_ENCODER /;"	d
MOTOR_C_PWM	pinout.h	/^#define MOTOR_C_PWM /;"	d
MOTOR_MAX_POWER_LEVEL	motor.h	/^#define MOTOR_MAX_POWER_LEVEL /;"	d
Motor	motor.cpp	/^Motor::Motor(byte dirPin, byte pwmPin) $/;"	f	class:Motor
Motor	motor.h	/^class Motor {$/;"	c
NUM_OF_LEDS	led.h	/^#define NUM_OF_LEDS /;"	d
NUM_OF_MOTORS	motor.h	/^#define NUM_OF_MOTORS /;"	d
NUM_OF_SENSORS	sensor.h	/^#define NUM_OF_SENSORS /;"	d
NUM_OF_THREADS	thread.h	/^#define NUM_OF_THREADS /;"	d
OP_COMMAND_BATTERY_LEVEL	comHandler.h	/^#define OP_COMMAND_BATTERY_LEVEL /;"	d
OP_COMMAND_CONFIRM_END_DATA_PLAY_MODE	comHandler.h	/^#define OP_COMMAND_CONFIRM_END_DATA_PLAY_MODE /;"	d
OP_COMMAND_CONFIRM_START_OF_PLAY_DATA	comHandler.h	/^#define OP_COMMAND_CONFIRM_START_OF_PLAY_DATA /;"	d
OP_COMMAND_CONFIRM_START_OF_PLAY_DATA_ROW	comHandler.h	/^#define OP_COMMAND_CONFIRM_START_OF_PLAY_DATA_ROW /;"	d
OP_COMMAND_CONFIRM_STOP	comHandler.h	/^#define OP_COMMAND_CONFIRM_STOP /;"	d
OP_COMMAND_END_DATA_PLAY_MODE	comHandler.h	/^#define OP_COMMAND_END_DATA_PLAY_MODE /;"	d
OP_COMMAND_END_OF_PLAY	comHandler.h	/^#define OP_COMMAND_END_OF_PLAY /;"	d
OP_COMMAND_ERROR	comHandler.h	/^#define OP_COMMAND_ERROR /;"	d
OP_COMMAND_ERROR_ON_RECEIVED_DATA	comHandler.h	/^#define OP_COMMAND_ERROR_ON_RECEIVED_DATA /;"	d
OP_COMMAND_ERROR_ON_SENT_DATA	comHandler.h	/^#define OP_COMMAND_ERROR_ON_SENT_DATA /;"	d
OP_COMMAND_FIRMWARE_VERSION	comHandler.h	/^#define OP_COMMAND_FIRMWARE_VERSION /;"	d
OP_COMMAND_ROW_EXECUTION_END	comHandler.h	/^#define OP_COMMAND_ROW_EXECUTION_END /;"	d
OP_COMMAND_ROW_EXECUTION_PREMATURE_END	comHandler.h	/^#define OP_COMMAND_ROW_EXECUTION_PREMATURE_END /;"	d
OP_COMMAND_ROW_EXECUTION_START	comHandler.h	/^#define OP_COMMAND_ROW_EXECUTION_START /;"	d
OP_COMMAND_START_OF_PLAY_DATA	comHandler.h	/^#define OP_COMMAND_START_OF_PLAY_DATA /;"	d
OP_COMMAND_START_OF_PLAY_DATA_ROW	comHandler.h	/^#define OP_COMMAND_START_OF_PLAY_DATA_ROW /;"	d
OP_COMMAND_STOP	comHandler.h	/^#define OP_COMMAND_STOP /;"	d
OWI	owi.cpp	/^OWI::OWI(uint8_t pin, uint8_t * pinr, uint8_t * port, uint8_t * ddr)$/;"	f	class:OWI
OWI	owi.h	/^class OWI$/;"	c
OWI_ALARM_SEARCH	owi.cpp	/^#define OWI_ALARM_SEARCH /;"	d	file:
OWI_BIT_ONE_HIGH	owi.cpp	/^#define OWI_BIT_ONE_HIGH /;"	d	file:
OWI_BIT_ONE_LOW	owi.cpp	/^#define OWI_BIT_ONE_LOW /;"	d	file:
OWI_BIT_PERIOD	owi.cpp	/^#define OWI_BIT_PERIOD /;"	d	file:
OWI_BIT_READ_LOW	owi.cpp	/^#define OWI_BIT_READ_LOW /;"	d	file:
OWI_BIT_SAMPLE_TIME	owi.cpp	/^#define OWI_BIT_SAMPLE_TIME /;"	d	file:
OWI_BIT_WAIT_AFTER_READ	owi.cpp	/^#define OWI_BIT_WAIT_AFTER_READ /;"	d	file:
OWI_BIT_ZERO_HIGH	owi.cpp	/^#define OWI_BIT_ZERO_HIGH /;"	d	file:
OWI_BIT_ZERO_LOW	owi.cpp	/^#define OWI_BIT_ZERO_LOW /;"	d	file:
OWI_CONVERT	owi.cpp	/^#define OWI_CONVERT /;"	d	file:
OWI_COPY	owi.cpp	/^#define OWI_COPY /;"	d	file:
OWI_MATCH_ROM	owi.cpp	/^#define OWI_MATCH_ROM /;"	d	file:
OWI_PRESENCE_SAMPLE	owi.cpp	/^#define OWI_PRESENCE_SAMPLE /;"	d	file:
OWI_READ	owi.cpp	/^#define OWI_READ /;"	d	file:
OWI_READ_ROM	owi.cpp	/^#define OWI_READ_ROM /;"	d	file:
OWI_RECALL_E2	owi.cpp	/^#define OWI_RECALL_E2 /;"	d	file:
OWI_RESET_LOW	owi.cpp	/^#define OWI_RESET_LOW /;"	d	file:
OWI_ROM_SIZE	owi.cpp	/^#define OWI_ROM_SIZE /;"	d	file:
OWI_RPS	owi.cpp	/^#define OWI_RPS /;"	d	file:
OWI_SEARCH_ROM	owi.cpp	/^#define OWI_SEARCH_ROM /;"	d	file:
OWI_SKIP_ROM	owi.cpp	/^#define OWI_SKIP_ROM /;"	d	file:
OWI_WAIT_AFTER_RESET	owi.cpp	/^#define OWI_WAIT_AFTER_RESET /;"	d	file:
OWI_WRITE	owi.cpp	/^#define OWI_WRITE /;"	d	file:
PINOUT_H	pinout.h	/^#define	PINOUT_H$/;"	d
PLAY_BUTTON_PIN	pinout.h	/^#define PLAY_BUTTON_PIN /;"	d
PLAY_LED_PIN	pinout.h	/^#define PLAY_LED_PIN /;"	d
POWER_BLINK	userInterface.h	/^#define POWER_BLINK /;"	d
POWER_CHECK_EVERY_X_MILLIS	userInterface.h	/^#define POWER_CHECK_EVERY_X_MILLIS /;"	d
POWER_HALF	userInterface.h	/^#define POWER_HALF /;"	d
POWER_LED_PIN	pinout.h	/^#define POWER_LED_PIN /;"	d
POWER_METER_PIN	pinout.h	/^#define POWER_METER_PIN /;"	d
POWER_SOUND_ALERT_MILLIS	userInterface.h	/^#define POWER_SOUND_ALERT_MILLIS /;"	d
PULSE_TIMEOUT	sensor.h	/^#define PULSE_TIMEOUT /;"	d
PowerManger	userInterface.cpp	/^PowerManger::PowerManger(uint8_t powerLedPin ,uint8_t powerMeterPin) {$/;"	f	class:PowerManger
PowerManger	userInterface.h	/^class PowerManger {$/;"	c
R1	userInterface.h	/^#define R1 20000.0 \/\/ resistance of R1 /;"	d
R2	userInterface.h	/^#define R2 10000.0 \/\/ resistance of R2 /;"	d
RIGHT	sequences.h	/^#define RIGHT /;"	d
SCRIPT_ARRAY_SIZE	scriptRow.h	/^#define SCRIPT_ARRAY_SIZE /;"	d
SCRIPT_ROW_LENGTH	comHandler.h	/^#define SCRIPT_ROW_LENGTH /;"	d
SENSOR_A_PIN	pinout.h	/^#define SENSOR_A_PIN /;"	d
SENSOR_B_PIN	pinout.h	/^#define SENSOR_B_PIN /;"	d
SENSOR_RAW_VALUE_LEVEL1_LIMIT	runTime.cpp	/^#define SENSOR_RAW_VALUE_LEVEL1_LIMIT /;"	d	file:
SENSOR_RAW_VALUE_LEVEL2_LIMIT	runTime.cpp	/^#define SENSOR_RAW_VALUE_LEVEL2_LIMIT /;"	d	file:
SENSOR_RAW_VALUE_LEVEL3_LIMIT	runTime.cpp	/^#define SENSOR_RAW_VALUE_LEVEL3_LIMIT /;"	d	file:
SENSOR_RAW_VALUE_MAX	runTime.cpp	/^#define SENSOR_RAW_VALUE_MAX /;"	d	file:
SERIAL_TIME_OUT_MILLIS	comHandler.h	/^#define SERIAL_TIME_OUT_MILLIS /;"	d
SHUT_DOWN_MILLIS	userInterface.h	/^#define SHUT_DOWN_MILLIS /;"	d
SLEEP_TIMEOUT	userInterface.h	/^#define SLEEP_TIMEOUT /;"	d
SOUND_STATE_PIN	pinout.h	/^#define SOUND_STATE_PIN /;"	d
SOUND_TX_PIN	pinout.h	/^#define SOUND_TX_PIN /;"	d
START_OF_MESSAGE_SYMBOL	comHandler.h	/^#define START_OF_MESSAGE_SYMBOL /;"	d
SYSTEM_DEBUG	debug.h	/^#define SYSTEM_DEBUG$/;"	d
SYSTIM_KEEP_ALIVE	systim.h	/^#define SYSTIM_KEEP_ALIVE	/;"	d
SYSTIM_TIMEOUT	systim.h	/^#define SYSTIM_TIMEOUT	/;"	d
ScriptRow	scriptRow.cpp	/^ScriptRow::ScriptRow(byte threadId, byte type, byte *dataBytes) {$/;"	f	class:ScriptRow
ScriptRow	scriptRow.h	/^  ScriptRow() {};$/;"	f	class:ScriptRow
ScriptRow	scriptRow.h	/^class ScriptRow {$/;"	c
Sensor	sensor.cpp	/^Sensor::Sensor(byte pin): serial(pin) {$/;"	f	class:Sensor
Sensor	sensor.h	/^class Sensor {$/;"	c
SoftwareUART	sensor.cpp	/^SoftwareUART::SoftwareUART(uint8_t rxPin) : rxPin(rxPin) {$/;"	f	class:SoftwareUART
SoftwareUART	sensor.h	/^class SoftwareUART {$/;"	c
SoundPlayer	soundPlayer.cpp	/^SoundPlayer::SoundPlayer(const byte txPin, const byte statePin) : soundSerial(txPin) {$/;"	f	class:SoundPlayer
SoundPlayer	soundPlayer.h	/^class SoundPlayer {$/;"	c
TOTAL_BYTES_OP_COMMAND_NO_CRC	comHandler.h	/^#define TOTAL_BYTES_OP_COMMAND_NO_CRC /;"	d
TYPE_CALC	scriptRow.h	/^  TYPE_CALC = 8,$/;"	e	enum:__anonecababe80103
TYPE_COMBINE_THREAD	scriptRow.h	/^  TYPE_COMBINE_THREAD = 10,$/;"	e	enum:__anonecababe80103
TYPE_END_LOOP	scriptRow.h	/^  TYPE_END_LOOP = 7,$/;"	e	enum:__anonecababe80103
TYPE_LED	scriptRow.h	/^  TYPE_LED = 9,$/;"	e	enum:__anonecababe80103
TYPE_MOVE_MOTOR	scriptRow.h	/^  TYPE_MOVE_MOTOR = 2,$/;"	e	enum:__anonecababe80103
TYPE_PROGRAM	scriptRow.h	/^  TYPE_PROGRAM = 12$/;"	e	enum:__anonecababe80103
TYPE_SOUND	scriptRow.h	/^  TYPE_SOUND = 5,$/;"	e	enum:__anonecababe80103
TYPE_START_LOOP	scriptRow.h	/^  TYPE_START_LOOP = 6,$/;"	e	enum:__anonecababe80103
TYPE_START_THREAD	scriptRow.h	/^  TYPE_START_THREAD = 1,$/;"	e	enum:__anonecababe80103
TYPE_STOP	scriptRow.h	/^  TYPE_STOP = 11,$/;"	e	enum:__anonecababe80103
TYPE_WAIT	scriptRow.h	/^  TYPE_WAIT = 4,$/;"	e	enum:__anonecababe80103
TYPE_WAIT_SENSOR	scriptRow.h	/^  TYPE_WAIT_SENSOR = 3,$/;"	e	enum:__anonecababe80103
Thread	thread.h	/^class Thread {$/;"	c
USE_CUSTOM_LEVEL_LIMITS	config.h	/^#define USE_CUSTOM_LEVEL_LIMITS /;"	d
__COMHANDLER_H	comHandler.h	/^#define __COMHANDLER_H$/;"	d
__CONFIG_H	config.h	/^#define __CONFIG_H$/;"	d
__DEBUG_H	debug.h	/^#define __DEBUG_H$/;"	d
__DELAY_H_	systim.h	/^#define __DELAY_H_$/;"	d
__FWVER_H	fwver.h	/^#define __FWVER_H$/;"	d
__LED_H	led.h	/^#define __LED_H$/;"	d
__MOTORENCODERS_H	motorEncoders.h	/^#define __MOTORENCODERS_H$/;"	d
__MOTOR_H	motor.h	/^#define __MOTOR_H$/;"	d
__OWI_H	owi.h	/^#define __OWI_H$/;"	d
__RUNTIME_H	runTime.h	/^#define __RUNTIME_H$/;"	d
__SCRIPTROW_H	scriptRow.h	/^#define __SCRIPTROW_H$/;"	d
__SENSOR_H	sensor.h	/^#define __SENSOR_H$/;"	d
__SEQUENCES_H	sequences.h	/^#define __SEQUENCES_H$/;"	d
__SOUNDPLAYER_H	soundPlayer.h	/^#define __SOUNDPLAYER_H$/;"	d
__SYSTEM_H	system.h	/^#define __SYSTEM_H$/;"	d
__THREAD_H	thread.h	/^#define __THREAD_H$/;"	d
__USERINTERFACE_H	userInterface.h	/^#define __USERINTERFACE_H$/;"	d
__anonecababe80103	scriptRow.h	/^const typedef enum {$/;"	g
all	Makefile	/^all:$/;"	t
assignScriptRow	thread.cpp	/^void assignScriptRow(byte threadId) {$/;"	f	typeref:typename:void
ballKicker	sequences.cpp	/^boolean ballKicker(byte scriptRowId) {$/;"	f	typeref:typename:boolean
basketball	sequences.cpp	/^boolean basketball(byte scriptRowId) {$/;"	f	typeref:typename:boolean
batteryLevel	userInterface.h	/^  int batteryLevel = 0;$/;"	m	class:PowerManger	typeref:typename:int
battery_timer	comHandler.h	/^		uint32_t battery_timer;$/;"	m	class:ComHandler	typeref:typename:uint32_t
bitPeriod	sensor.h	/^    static const unsigned int bitPeriod = 104; \/\/ Microseconds for 9600 baud$/;"	m	class:SoftwareUART	typeref:typename:const unsigned int
blinkState	userInterface.h	/^        boolean blinkState;$/;"	m	class:Button	typeref:typename:boolean
buttonLastState	userInterface.h	/^        boolean buttonLastState;$/;"	m	class:Button	typeref:typename:boolean
buttonLastStateMillis	userInterface.h	/^        unsigned long buttonLastStateMillis;$/;"	m	class:Button	typeref:typename:unsigned long
buttonPin	userInterface.h	/^        byte buttonPin;$/;"	m	class:Button	typeref:typename:byte
buttonState	userInterface.h	/^        boolean buttonState;$/;"	m	class:Button	typeref:typename:boolean
changeSpeed	motor.cpp	/^void Motor::changeSpeed(byte pwm) $/;"	f	class:Motor	typeref:typename:void
changeSpeed	runTime.cpp	/^boolean changeSpeed = 1; $/;"	v	typeref:typename:boolean
checkEncodersOfMotor	motorEncoders.cpp	/^void checkEncodersOfMotor(byte motorId) $/;"	f	typeref:typename:void
checkPower	userInterface.cpp	/^  void PowerManger::checkPower() {$/;"	f	class:PowerManger	typeref:typename:void
chk4TimeoutSYSTIM	systim.cpp	/^uint8_t chk4TimeoutSYSTIM(uint32_t btime, uint32_t period)$/;"	f	typeref:typename:uint8_t
clearSerialBuffer	comHandler.cpp	/^void ComHandler::clearSerialBuffer() $/;"	f	class:ComHandler	typeref:typename:void
cmd_get_response	sensor.cpp	/^int8_t Sensor::cmd_get_response(uint8_t *cmd, uint8_t *payload, uint8_t *size) $/;"	f	class:Sensor	typeref:typename:int8_t
cmd_tx	sensor.cpp	/^void Sensor::cmd_tx(uint8_t cmd, uint8_t *payload, uint8_t size) {$/;"	f	class:Sensor	typeref:typename:void
comHandler	comHandler.cpp	/^ComHandler comHandler;$/;"	v	typeref:typename:ComHandler
counter	scriptRow.h	/^  byte counter = 0;$/;"	m	class:ScriptRow	typeref:typename:byte
crc	comHandler.h	/^        Crc16 crc;$/;"	m	class:ComHandler	typeref:typename:Crc16
currentReceivedRow	scriptRow.cpp	/^byte currentReceivedRow = 0;      \/\/ Current Script Row Received$/;"	v	typeref:typename:byte
currentThread	thread.cpp	/^byte currentThread = 0;$/;"	v	typeref:typename:byte
currentTrack	soundPlayer.h	/^        byte currentTrack = 0;$/;"	m	class:SoundPlayer	typeref:typename:byte
current_dir	sequences.cpp	/^int current_dir = 0; \/\/ 0 - up, 2 = 90 = Right, 3 = 180 = Down, 4 = -90 = 270 = Left$/;"	v	typeref:typename:int
dataBytes	scriptRow.h	/^  byte dataBytes[DATA_BYTES_SIZE] = {};$/;"	m	class:ScriptRow	typeref:typename:byte[]
ddr_	owi.h	/^        uint8_t * ddr_;$/;"	m	class:OWI	typeref:typename:uint8_t *
debugCOM	comHandler.h	/^#define debugCOM /;"	d
debugENCODER	motorEncoders.h	/^#define debugENCODER /;"	d
debugMOTOR	motor.h	/^#define debugMOTOR /;"	d
debugRUN	runTime.h	/^#define debugRUN /;"	d
debugSENSOR	sensor.h	/^#define debugSENSOR /;"	d
debugSEQUENCES	sequences.h	/^#define debugSEQUENCES /;"	d
debugSOUND	soundPlayer.h	/^#define debugSOUND /;"	d
debugSYS	system.h	/^#define debugSYS /;"	d
debugTHREAD	thread.h	/^#define debugTHREAD /;"	d
debugUI	userInterface.h	/^#define debugUI /;"	d
diff	motorEncoders.cpp	/^int diff = 0;$/;"	v	typeref:typename:int
dirPin	motor.h	/^        byte dirPin;$/;"	m	class:Motor	typeref:typename:byte
direction	motor.h	/^        boolean direction = CW;$/;"	m	class:Motor	typeref:typename:boolean
duration	scriptRow.h	/^  long duration = 0;$/;"	m	class:ScriptRow	typeref:typename:long
encA	sequences.cpp	/^int encA = 0; $/;"	v	typeref:typename:int
encB	sequences.cpp	/^int encB = 0;$/;"	v	typeref:typename:int
encoderDuration	motorEncoders.cpp	/^int encoderDuration = 65535; \/\/ Maximum by default$/;"	v	typeref:typename:int
encodersInit	motorEncoders.cpp	/^void encodersInit() { $/;"	f	typeref:typename:void
endLoopCommand	sequences.cpp	/^void endLoopCommand(byte scriptRowId, byte firstCommandInLoop) {$/;"	f	typeref:typename:void
fan	sequences.cpp	/^boolean fan(byte scriptRowId) {$/;"	f	typeref:typename:boolean
garbageCanLifter	sequences.cpp	/^boolean garbageCanLifter(byte scriptRowId) {$/;"	f	typeref:typename:boolean
getBattery	userInterface.cpp	/^  int PowerManger::getBattery() $/;"	f	class:PowerManger	typeref:typename:int
getElapsedTimeSYSTIM	systim.cpp	/^uint32_t getElapsedTimeSYSTIM(uint32_t t_beg)$/;"	f	typeref:typename:uint32_t
getNextScriptRow	runTime.cpp	/^void getNextScriptRow(byte scriptRowId) {$/;"	f	typeref:typename:void
getNextThread	runTime.cpp	/^void getNextThread() {$/;"	f	typeref:typename:void
getSYSTIM	systim.cpp	/^uint32_t getSYSTIM(void)$/;"	f	typeref:typename:uint32_t
getTrackCommand	soundPlayer.cpp	/^String SoundPlayer::getTrackCommand(byte trackNumber) {$/;"	f	class:SoundPlayer	typeref:typename:String
getValue	sensor.cpp	/^uint8_t Sensor::getValue(uint8_t *sensor_type) {$/;"	f	class:Sensor	typeref:typename:uint8_t
goToEndLoop	thread.cpp	/^void goToEndLoop() {$/;"	f	typeref:typename:void
goalKeeper	sequences.cpp	/^boolean goalKeeper(byte scriptRowId) {$/;"	f	typeref:typename:boolean
ground_zero	sequences.cpp	/^void ground_zero(boolean dir, byte scriptRowId){   \/\/Lower to ground zero $/;"	f	typeref:typename:void
initDEBUG	debug.h	/^#define initDEBUG(/;"	d
initOneEncoder	motorEncoders.cpp	/^void initOneEncoder(int motorId) {$/;"	f	typeref:typename:void
isAllowedToContinue	thread.cpp	/^boolean isAllowedToContinue(byte startLoopScriptRowId, byte endLoopThreadId) {$/;"	f	typeref:typename:boolean
isBleConnected	comHandler.cpp	/^boolean ComHandler::isBleConnected(void) $/;"	f	class:ComHandler	typeref:typename:boolean
isFirstPowerLedOn	userInterface.h	/^  boolean isFirstPowerLedOn = true; $/;"	m	class:PowerManger	typeref:typename:boolean
isFirstSoundCheck	userInterface.h	/^  boolean isFirstSoundCheck = true;$/;"	m	class:PowerManger	typeref:typename:boolean
isHighA	motorEncoders.cpp	/^boolean isHighA = false;$/;"	v	typeref:typename:boolean
isHighB	motorEncoders.cpp	/^boolean isHighB = false;$/;"	v	typeref:typename:boolean
isMessageWaitingForProcess	comHandler.h	/^        boolean isMessageWaitingForProcess = false;$/;"	m	class:ComHandler	typeref:typename:boolean
isOn	soundPlayer.h	/^        boolean isOn = false;$/;"	m	class:SoundPlayer	typeref:typename:boolean
isPlaying	soundPlayer.cpp	/^boolean SoundPlayer::isPlaying() {$/;"	f	class:SoundPlayer	typeref:typename:boolean
isPlaying	system.cpp	/^boolean isPlaying = false;$/;"	v	typeref:typename:boolean
isPlayingFromBrain	system.cpp	/^boolean isPlayingFromBrain = false;$/;"	v	typeref:typename:boolean
isPowerLedBlink	userInterface.h	/^  boolean isPowerLedBlink = false;$/;"	m	class:PowerManger	typeref:typename:boolean
isRunning	motor.cpp	/^boolean Motor::isRunning() $/;"	f	class:Motor	typeref:typename:boolean
isRunning	scriptRow.h	/^  bool isRunning = false;$/;"	m	class:ScriptRow	typeref:typename:bool
isRunning	thread.h	/^        boolean isRunning = false;$/;"	m	class:Thread	typeref:typename:boolean
isScriptLoaded	system.cpp	/^boolean isScriptLoaded = false;$/;"	v	typeref:typename:boolean
isStartOfLoop	sequences.cpp	/^boolean isStartOfLoop = true;$/;"	v	typeref:typename:boolean
lastPowerCheckMillis	userInterface.h	/^  unsigned long lastPowerCheckMillis = 0;$/;"	m	class:PowerManger	typeref:typename:unsigned long
lastPowerLedChangeMillis	userInterface.h	/^  unsigned long lastPowerLedChangeMillis = 0;$/;"	m	class:PowerManger	typeref:typename:unsigned long
ledMonkeyMove	sequences.cpp	/^boolean ledMonkeyMove(byte scriptRowId) {$/;"	f	typeref:typename:boolean
ledOn	sequences.cpp	/^void ledOn(byte scriptRowId, long duration, boolean *isLedSelected, byte r, byte g, byte b) {$/;"	f	typeref:typename:void
ledPin	userInterface.h	/^        byte ledPin;$/;"	m	class:Button	typeref:typename:byte
ledState	userInterface.h	/^        boolean ledState;$/;"	m	class:Button	typeref:typename:boolean
ledStateMillis	userInterface.h	/^        unsigned long ledStateMillis;$/;"	m	class:Button	typeref:typename:unsigned long
leds	led.cpp	/^Led leds[NUM_OF_LEDS] = {Led(LED_A_PIN), Led(LED_B_PIN)};$/;"	v	typeref:typename:Led[]
ledsInit	led.cpp	/^void ledsInit(void) {$/;"	f	typeref:typename:void
loopCounter	sequences.cpp	/^byte loopCounter = 0;$/;"	v	typeref:typename:byte
loopRowIdThatOpenedInThisThread	thread.h	/^        byte loopRowIdThatOpenedInThisThread = 0; \/\/ Keeps the last loop that has been opened /;"	m	class:Thread	typeref:typename:byte
mapStep	motorEncoders.cpp	/^int mapStep = 3050; \/\/ snail transmission 6 PPR motor$/;"	v	typeref:typename:int
maxPower	motorEncoders.cpp	/^int maxPower = 215; $/;"	v	typeref:typename:int
minPower	motorEncoders.cpp	/^int minPower = 121; $/;"	v	typeref:typename:int
motorBalanceSpeed	motorEncoders.cpp	/^boolean motorBalanceSpeed()$/;"	f	typeref:typename:boolean
motorBalanceTimer	motorEncoders.cpp	/^unsigned long motorBalanceTimer;$/;"	v	typeref:typename:unsigned long
motors	motor.cpp	/^Motor motors[NUM_OF_MOTORS] = $/;"	v	typeref:typename:Motor[]
motorsInit	motor.cpp	/^void motorsInit() $/;"	f	typeref:typename:void
moveMotorEncoder	sequences.cpp	/^void moveMotorEncoder(byte scriptRowId, long encoderDuration, byte *motorAndDirection, byte pwm)/;"	f	typeref:typename:void
moveMotorTime	sequences.cpp	/^void moveMotorTime(byte scriptRowId, long duration, byte *motorAndDirection, byte pwm) {$/;"	f	typeref:typename:void
moveRand	sequences.cpp	/^int moveRand = 0; $/;"	v	typeref:typename:int
myAnalogWrite	motorEncoders.cpp	/^void myAnalogWrite(byte pin, byte val) $/;"	f	typeref:typename:void
neoPixelLed	led.h	/^        Adafruit_NeoPixel neoPixelLed;$/;"	m	class:Led	typeref:typename:Adafruit_NeoPixel
nextCommand	sequences.cpp	/^void nextCommand(byte scriptRowId) {$/;"	f	typeref:typename:void
noiseForLowBattery	system.cpp	/^boolean noiseForLowBattery = false; \/\/ this will work, only on startup$/;"	v	typeref:typename:boolean
numOfRunningScriptRows	scriptRow.cpp	/^byte numOfRunningScriptRows = 0;$/;"	v	typeref:typename:byte
numOfRunningThreads	thread.cpp	/^byte numOfRunningThreads = 0;$/;"	v	typeref:typename:byte
pin	sensor.h	/^        byte pin;$/;"	m	class:Sensor	typeref:typename:byte
pinHigh	owi.cpp	/^void OWI::pinHigh(void)$/;"	f	class:OWI	typeref:typename:void
pinInput	owi.cpp	/^void OWI::pinInput(void)$/;"	f	class:OWI	typeref:typename:void
pinLow	owi.cpp	/^void OWI::pinLow(void)$/;"	f	class:OWI	typeref:typename:void
pinOutput	owi.cpp	/^void OWI::pinOutput(void)$/;"	f	class:OWI	typeref:typename:void
pinRead	owi.cpp	/^uint8_t OWI::pinRead(void)$/;"	f	class:OWI	typeref:typename:uint8_t
pin_	owi.h	/^        uint8_t pin_;$/;"	m	class:OWI	typeref:typename:uint8_t
pinr_	owi.h	/^        uint8_t * pinr_;$/;"	m	class:OWI	typeref:typename:uint8_t *
play	soundPlayer.cpp	/^void SoundPlayer::play(byte trackId, byte scriptRowId, boolean untillStop) {$/;"	f	class:SoundPlayer	typeref:typename:void
playSound_11	sequences.cpp	/^int playSound_11 =1; \/\/ for garbage can$/;"	v	typeref:typename:int
port_	owi.h	/^        uint8_t * port_;$/;"	m	class:OWI	typeref:typename:uint8_t *
powerLedPin	userInterface.h	/^  uint8_t powerLedPin = 0;$/;"	m	class:PowerManger	typeref:typename:uint8_t
powerLedState	userInterface.h	/^  boolean powerLedState = false;$/;"	m	class:PowerManger	typeref:typename:boolean
powerMeterPin	userInterface.h	/^  uint8_t powerMeterPin = 0;$/;"	m	class:PowerManger	typeref:typename:uint8_t
preDiff	motorEncoders.cpp	/^int preDiff = 0; \/\/ parameter for PD control$/;"	v	typeref:typename:int
prematureEndLedScript	led.cpp	/^void prematureEndLedScript(byte scriptRowId) {$/;"	f	typeref:typename:void
prematureEndMotorScript	motor.cpp	/^void prematureEndMotorScript(byte scriptRowId) $/;"	f	typeref:typename:void
prematureEndSoundScript	soundPlayer.cpp	/^void prematureEndSoundScript(byte scriptRowId) {$/;"	f	typeref:typename:void
printDEBUG	debug.h	/^#define printDEBUG /;"	d
printMessage	system.cpp	/^void printMessage(byte *messageToProcess) $/;"	f	typeref:typename:void
processEndLoop	runTime.cpp	/^boolean processEndLoop(byte scriptRowId) {$/;"	f	typeref:typename:boolean
processIncomingData	comHandler.cpp	/^void ComHandler::processIncomingData() {$/;"	f	class:ComHandler	typeref:typename:void
processLed	runTime.cpp	/^boolean processLed(byte scriptRowId) {$/;"	f	typeref:typename:boolean
processMessage	system.cpp	/^void processMessage() $/;"	f	typeref:typename:void
processPlayButton	system.cpp	/^void processPlayButton() $/;"	f	typeref:typename:void
processScriptRow	runTime.cpp	/^void processScriptRow(byte scriptRowId) {$/;"	f	typeref:typename:void
processStartLoop	runTime.cpp	/^boolean processStartLoop(byte scriptRowId) {$/;"	f	typeref:typename:boolean
processStartThread	runTime.cpp	/^boolean processStartThread(byte scriptRowId) {$/;"	f	typeref:typename:boolean
processStop	runTime.cpp	/^boolean processStop(byte scriptRowId) {$/;"	f	typeref:typename:boolean
processThreads	runTime.cpp	/^void processThreads() {$/;"	f	typeref:typename:void
processWaitSensor	runTime.cpp	/^boolean processWaitSensor(byte scriptRowId) {$/;"	f	typeref:typename:boolean
pwm	motor.h	/^        byte pwm = 0;$/;"	m	class:Motor	typeref:typename:byte
pwmPin	motor.h	/^        byte pwmPin;$/;"	m	class:Motor	typeref:typename:byte
rand_dir	sequences.cpp	/^int rand_dir = 0; \/\/ 0 - Up, 2 = 90 = Right, 3 = 180 = Down, 4 = -90 = 270 = Left$/;"	v	typeref:typename:int
readValue	owi.cpp	/^uint8_t OWI::readValue(uint8_t reg, uint8_t *value)$/;"	f	class:OWI	typeref:typename:uint8_t
reset	owi.cpp	/^void OWI::reset(void)$/;"	f	class:OWI	typeref:typename:void
reset	scriptRow.cpp	/^void ScriptRow::reset() {$/;"	f	class:ScriptRow	typeref:typename:void
reset	thread.cpp	/^void Thread::reset() {$/;"	f	class:Thread	typeref:typename:void
rxByte	owi.cpp	/^uint8_t OWI::rxByte(void)$/;"	f	class:OWI	typeref:typename:uint8_t
rxData	comHandler.h	/^        byte rxData[SCRIPT_ROW_LENGTH];$/;"	m	class:ComHandler	typeref:typename:byte[]
rxDataIDX	comHandler.h	/^        byte rxDataIDX = 0;  \/\/ Current Received Byte$/;"	m	class:ComHandler	typeref:typename:byte
rxPin	sensor.h	/^    uint8_t rxPin;$/;"	m	class:SoftwareUART	typeref:typename:uint8_t
rx_byte	sensor.cpp	/^int SoftwareUART::rx_byte(uint8_t* value, unsigned long timeout) $/;"	f	class:SoftwareUART	typeref:typename:int
scriptRowArray	scriptRow.cpp	/^ScriptRow scriptRowArray[SCRIPT_ARRAY_SIZE];$/;"	v	typeref:typename:ScriptRow[]
scriptRowId	led.h	/^        byte scriptRowId = 0;$/;"	m	class:Led	typeref:typename:byte
scriptRowId	motor.h	/^        byte scriptRowId = 0;$/;"	m	class:Motor	typeref:typename:byte
scriptRowId	soundPlayer.h	/^        byte scriptRowId = 0;$/;"	m	class:SoundPlayer	typeref:typename:byte
scriptRowId	thread.h	/^        byte scriptRowId = 0;$/;"	m	class:Thread	typeref:typename:byte
scriptRowIdEncoderA	motorEncoders.cpp	/^byte scriptRowIdEncoderA = 0;$/;"	v	typeref:typename:byte
scriptRowIdEncoderB	motorEncoders.cpp	/^byte scriptRowIdEncoderB = 0;$/;"	v	typeref:typename:byte
scriptRowIdEncoderC	motorEncoders.cpp	/^byte scriptRowIdEncoderC = 0;$/;"	v	typeref:typename:byte
scriptRowType	scriptRow.h	/^} scriptRowType;$/;"	t	typeref:typename:const enum __anonecababe80103
scriptRowsInit	scriptRow.cpp	/^void scriptRowsInit() {$/;"	f	typeref:typename:void
sendBatteryLevel	comHandler.cpp	/^void ComHandler::sendBatteryLevel(uint16_t level) $/;"	f	class:ComHandler	typeref:typename:void
sendEndOfPlay	comHandler.cpp	/^void ComHandler::sendEndOfPlay() {$/;"	f	class:ComHandler	typeref:typename:void
sendEndOfPlayData	comHandler.cpp	/^void ComHandler::sendEndOfPlayData() {$/;"	f	class:ComHandler	typeref:typename:void
sendFirmwareVersion	comHandler.cpp	/^void ComHandler::sendFirmwareVersion(uint8_t fwver) $/;"	f	class:ComHandler	typeref:typename:void
sendFirmwareVersionFlag	userInterface.h	/^  uint8_t sendFirmwareVersionFlag = 0;$/;"	m	class:PowerManger	typeref:typename:uint8_t
sendMsgToPlayCube	comHandler.cpp	/^void ComHandler::sendMsgToPlayCube(byte msg[2]) $/;"	f	class:ComHandler	typeref:typename:void
sendReceiveDataError	comHandler.cpp	/^void ComHandler::sendReceiveDataError() {$/;"	f	class:ComHandler	typeref:typename:void
sendRowConfirm	comHandler.cpp	/^void ComHandler::sendRowConfirm(byte row) {$/;"	f	class:ComHandler	typeref:typename:void
sendRowExecute	comHandler.cpp	/^void ComHandler::sendRowExecute(byte opCommand, byte rowId) {$/;"	f	class:ComHandler	typeref:typename:void
sendStartPlayData	comHandler.cpp	/^void ComHandler::sendStartPlayData() {$/;"	f	class:ComHandler	typeref:typename:void
sendStopPlayConfirm	comHandler.cpp	/^void ComHandler::sendStopPlayConfirm() {$/;"	f	class:ComHandler	typeref:typename:void
sensors	sensor.cpp	/^Sensor sensors[NUM_OF_SENSORS] = {Sensor(SENSOR_A_PIN), Sensor(SENSOR_B_PIN)};$/;"	v	typeref:typename:Sensor[]
sequenceDone	sequences.cpp	/^void sequenceDone(byte scriptRowId) {$/;"	f	typeref:typename:void
serial	sensor.h	/^        SoftwareUART serial;$/;"	m	class:Sensor	typeref:typename:SoftwareUART
setLedBlinkState	userInterface.cpp	/^void Button::setLedBlinkState(boolean newState) {$/;"	f	class:Button	typeref:typename:void
setLedState	userInterface.cpp	/^void Button::setLedState(boolean newState) {$/;"	f	class:Button	typeref:typename:void
setMotorInterrupt	motorEncoders.cpp	/^void setMotorInterrupt(byte motorId, long timeToInterruprt, byte scriptRowId) {$/;"	f	typeref:typename:void
setVolume	soundPlayer.cpp	/^void SoundPlayer::setVolume(int volumeLevel) $/;"	f	class:SoundPlayer	typeref:typename:void
shutdown	system.cpp	/^void shutdown() {$/;"	f	typeref:typename:void
sign	sequences.cpp	/^int sign = 0; $/;"	v	typeref:typename:int
sleepTimeoutCheck	system.cpp	/^void sleepTimeoutCheck() {$/;"	f	typeref:typename:void
sleepTimeoutMillis	system.cpp	/^unsigned long sleepTimeoutMillis;$/;"	v	typeref:typename:unsigned long
soundPowerCheckMillis	userInterface.h	/^  unsigned long soundPowerCheckMillis = 0;$/;"	m	class:PowerManger	typeref:typename:unsigned long
soundSerial	soundPlayer.h	/^        SendOnlySoftwareSerial soundSerial;$/;"	m	class:SoundPlayer	typeref:typename:SendOnlySoftwareSerial
squareMovement	sequences.cpp	/^boolean squareMovement(byte scriptRowId) {$/;"	f	typeref:typename:boolean
start	led.cpp	/^void Led::start(byte r, byte g, byte b, byte scriptRowId) $/;"	f	class:Led	typeref:typename:void
start	motor.cpp	/^void Motor::start(byte pwm, boolean dir, byte scriptRowId) $/;"	f	class:Motor	typeref:typename:void
start	thread.cpp	/^void Thread::start() {$/;"	f	class:Thread	typeref:typename:void
startLoopCommand	sequences.cpp	/^void startLoopCommand(byte iterations) {$/;"	f	typeref:typename:void
startMillis	soundPlayer.h	/^        unsigned long startMillis = -1;$/;"	m	class:SoundPlayer	typeref:typename:unsigned long
startPlaying	system.cpp	/^void startPlaying() {$/;"	f	typeref:typename:void
startTime	scriptRow.h	/^  long startTime = -1;$/;"	m	class:ScriptRow	typeref:typename:long
stepPow	motorEncoders.cpp	/^int stepPow = 10; \/\/ power step size$/;"	v	typeref:typename:int
stop	led.cpp	/^void Led::stop(byte scriptRowId)$/;"	f	class:Led	typeref:typename:void
stop	motor.cpp	/^void Motor::stop(byte scriptRowId) $/;"	f	class:Motor	typeref:typename:void
stop	soundPlayer.cpp	/^void SoundPlayer::stop() {$/;"	f	class:SoundPlayer	typeref:typename:void
stop	thread.cpp	/^void Thread::stop() {$/;"	f	class:Thread	typeref:typename:void
stopPlaying	system.cpp	/^void stopPlaying(boolean onlyInit) {$/;"	f	typeref:typename:void
tempPowerA	motorEncoders.cpp	/^byte tempPowerA = 0; $/;"	v	typeref:typename:byte
tempPowerB	motorEncoders.cpp	/^byte tempPowerB = 0;$/;"	v	typeref:typename:byte
tenDegrees	motorEncoders.cpp	/^int tenDegrees = 295; \/\/ sets the rotations 6 PPR motor$/;"	v	typeref:typename:int
threadArray	thread.cpp	/^Thread threadArray[NUM_OF_THREADS];$/;"	v	typeref:typename:Thread[]
threadBelongsToLoopRowId	thread.h	/^        byte threadBelongsToLoopRowId = 0;        \/\/ If a thread was opened within a loop, it /;"	m	class:Thread	typeref:typename:byte
threadId	scriptRow.h	/^  byte threadId = 0;$/;"	m	class:ScriptRow	typeref:typename:byte
threadsInit	thread.cpp	/^void threadsInit() {$/;"	f	typeref:typename:void
timer	comHandler.h	/^        unsigned long timer = 0; \/\/ To mark the last byte Receive time (for timeout)$/;"	m	class:ComHandler	typeref:typename:unsigned long
toggleLedState	userInterface.cpp	/^void Button::toggleLedState() {$/;"	f	class:Button	typeref:typename:void
totalRowsInData	scriptRow.cpp	/^byte totalRowsInData = 0;         \/\/ Total Rows of data Expected$/;"	v	typeref:typename:byte
transmitSerialBuffer	comHandler.h	/^        byte transmitSerialBuffer[TOTAL_BYTES_OP_COMMAND_NO_CRC];$/;"	m	class:ComHandler	typeref:typename:byte[]
travelRandom	sequences.cpp	/^boolean travelRandom(byte scriptRowId) {$/;"	f	typeref:typename:boolean
travelRandomCase	sequences.cpp	/^byte travelRandomCase = 0;$/;"	v	typeref:typename:byte
txByte	owi.cpp	/^void OWI::txByte(uint8_t data)$/;"	f	class:OWI	typeref:typename:void
tx_byte	sensor.cpp	/^void SoftwareUART::tx_byte(uint8_t value) $/;"	f	class:SoftwareUART	typeref:typename:void
type	scriptRow.h	/^  byte type = 0;$/;"	m	class:ScriptRow	typeref:typename:byte
type	sensor.h	/^        uint8_t type;$/;"	m	class:Sensor	typeref:typename:uint8_t
upload	Makefile	/^upload:$/;"	t
volume	soundPlayer.h	/^        char volume[10] = {'B', 'D', 'E', 'I', 'K', 'L', 'M', 'P', 'T', 't'}; \/\/ 'B'(LOWEST)../;"	m	class:SoundPlayer	typeref:typename:char[10]
wait4Presence	owi.cpp	/^uint8_t OWI::wait4Presence(void)$/;"	f	class:OWI	typeref:typename:uint8_t
write	sensor.cpp	/^void SoftwareUART::write(uint8_t* data, size_t size) {$/;"	f	class:SoftwareUART	typeref:typename:void
xCurrent	sequences.cpp	/^int xCurrent = 0; \/\/ Y current$/;"	v	typeref:typename:int
xRand	sequences.cpp	/^int xRand = 0; $/;"	v	typeref:typename:int
yCurrent	sequences.cpp	/^int yCurrent = 0; \/\/ X current$/;"	v	typeref:typename:int
yRand	sequences.cpp	/^int yRand = 0; $/;"	v	typeref:typename:int
