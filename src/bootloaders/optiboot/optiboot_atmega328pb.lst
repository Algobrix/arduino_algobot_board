
optiboot_atmega328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fc6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059f  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000247  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e2  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bc  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e00:	11 24       	eor	r1, r1
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7e06:	98 2f       	mov	r25, r24
    7e08:	9d 70       	andi	r25, 0x0D	; 13
    7e0a:	09 f0       	breq	.+2      	; 0x7e0e <main+0xe>
      appStart(ch);
    7e0c:	d6 d0       	rcall	.+428    	; 0x7fba <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0e:	85 e0       	ldi	r24, 0x05	; 5
    7e10:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#endif

#ifndef SOFT_UART
// Turn on the pull-up resistor for RX.
	PORTD |= (1 << 0);
    7e14:	58 9a       	sbi	0x0b, 0	; 11
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e22:	86 e0       	ldi	r24, 0x06	; 6
    7e24:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e28:	80 e1       	ldi	r24, 0x10	; 16
    7e2a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
    7e30:	af d0       	rcall	.+350    	; 0x7f90 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e32:	20 9a       	sbi	0x04, 0	; 4
    7e34:	82 e0       	ldi	r24, 0x02	; 2
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	20 e3       	ldi	r18, 0x30	; 48
    7e38:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7e3a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3c:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7e40:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7e44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e46:	b0 9b       	sbis	0x16, 0	; 22
    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e4a:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e4c:	a8 95       	wdr
    7e4e:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
    7e52:	c0 e0       	ldi	r28, 0x00	; 0
    7e54:	d0 e0       	ldi	r29, 0x00	; 0
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7e56:	93 e0       	ldi	r25, 0x03	; 3
    7e58:	f9 2e       	mov	r15, r25
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e5a:	ee 24       	eor	r14, r14
    7e5c:	e3 94       	inc	r14
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7e5e:	25 e0       	ldi	r18, 0x05	; 5
    7e60:	d2 2e       	mov	r13, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7e62:	31 e1       	ldi	r19, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e64:	c3 2e       	mov	r12, r19

    if(ch == STK_GET_PARAMETER) {
    7e66:	86 d0       	rcall	.+268    	; 0x7f74 <getch>
      unsigned char which = getch();
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	71 f4       	brne	.+28     	; 0x7e88 <main+0x88>
    7e6c:	83 d0       	rcall	.+262    	; 0x7f74 <getch>
      verifySpace();
    7e6e:	18 2f       	mov	r17, r24
    7e70:	95 d0       	rcall	.+298    	; 0x7f9c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    7e72:	12 38       	cpi	r17, 0x82	; 130
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
	  putch(optiboot_version & 0xFF);
    7e76:	82 e0       	ldi	r24, 0x02	; 2
    7e78:	05 c0       	rjmp	.+10     	; 0x7e84 <main+0x84>
      } else if (which == STK_SW_MAJOR) {
    7e7a:	11 38       	cpi	r17, 0x81	; 129
	  putch(optiboot_version >> 8);
    7e7c:	11 f4       	brne	.+4      	; 0x7e82 <main+0x82>
    7e7e:	86 e0       	ldi	r24, 0x06	; 6
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e80:	01 c0       	rjmp	.+2      	; 0x7e84 <main+0x84>
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	70 d0       	rcall	.+224    	; 0x7f66 <putch>
    7e86:	6c c0       	rjmp	.+216    	; 0x7f60 <main+0x160>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e88:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x90>
    7e8c:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e8e:	03 c0       	rjmp	.+6      	; 0x7e96 <main+0x96>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e90:	85 34       	cpi	r24, 0x45	; 69
    7e92:	19 f4       	brne	.+6      	; 0x7e9a <main+0x9a>
    7e94:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e96:	8a d0       	rcall	.+276    	; 0x7fac <getNch>
    7e98:	63 c0       	rjmp	.+198    	; 0x7f60 <main+0x160>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7e9a:	85 35       	cpi	r24, 0x55	; 85
    7e9c:	41 f4       	brne	.+16     	; 0x7eae <main+0xae>
    7e9e:	6a d0       	rcall	.+212    	; 0x7f74 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ea0:	c8 2f       	mov	r28, r24
    7ea2:	68 d0       	rcall	.+208    	; 0x7f74 <getch>
    7ea4:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7ea6:	d8 2b       	or	r29, r24
    7ea8:	cc 0f       	add	r28, r28
    7eaa:	dd 1f       	adc	r29, r29
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7eac:	58 c0       	rjmp	.+176    	; 0x7f5e <main+0x15e>
      // UNIVERSAL command is ignored
      getNch(4);
    7eae:	86 35       	cpi	r24, 0x56	; 86
    7eb0:	21 f4       	brne	.+8      	; 0x7eba <main+0xba>
      putch(0x00);
    7eb2:	84 e0       	ldi	r24, 0x04	; 4
    7eb4:	7b d0       	rcall	.+246    	; 0x7fac <getNch>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7eb6:	80 e0       	ldi	r24, 0x00	; 0
    7eb8:	e5 cf       	rjmp	.-54     	; 0x7e84 <main+0x84>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7eba:	84 36       	cpi	r24, 0x64	; 100
    7ebc:	09 f0       	breq	.+2      	; 0x7ec0 <main+0xc0>
    7ebe:	32 c0       	rjmp	.+100    	; 0x7f24 <main+0x124>
    7ec0:	59 d0       	rcall	.+178    	; 0x7f74 <getch>
      savelength = length;
      desttype = getch();
    7ec2:	58 d0       	rcall	.+176    	; 0x7f74 <getch>
    7ec4:	b8 2e       	mov	r11, r24
    7ec6:	56 d0       	rcall	.+172    	; 0x7f74 <getch>
    7ec8:	a8 2e       	mov	r10, r24
    7eca:	00 e0       	ldi	r16, 0x00	; 0

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ecc:	11 e0       	ldi	r17, 0x01	; 1
    7ece:	52 d0       	rcall	.+164    	; 0x7f74 <getch>
    7ed0:	f8 01       	movw	r30, r16
    7ed2:	81 93       	st	Z+, r24
    7ed4:	8f 01       	movw	r16, r30
      while (--length);
    7ed6:	be 12       	cpse	r11, r30
    7ed8:	fa cf       	rjmp	.-12     	; 0x7ece <main+0xce>

      // Read command terminator, start reply
      verifySpace();
    7eda:	60 d0       	rcall	.+192    	; 0x7f9c <verifySpace>
    7edc:	f5 e4       	ldi	r31, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    7ede:	af 12       	cpse	r10, r31
    7ee0:	01 c0       	rjmp	.+2      	; 0x7ee4 <main+0xe4>
    7ee2:	ff cf       	rjmp	.-2      	; 0x7ee2 <main+0xe2>
    7ee4:	fe 01       	movw	r30, r28
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7ee6:	f7 be       	out	0x37, r15	; 55
    7ee8:	e8 95       	spm
    7eea:	07 b6       	in	r0, 0x37	; 55
	    boot_spm_busy_wait();
    7eec:	00 fc       	sbrc	r0, 0
    7eee:	fd cf       	rjmp	.-6      	; 0x7eea <main+0xea>
    7ef0:	fe 01       	movw	r30, r28
    7ef2:	a0 e0       	ldi	r26, 0x00	; 0
    7ef4:	b1 e0       	ldi	r27, 0x01	; 1
    7ef6:	8c 91       	ld	r24, X
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7ef8:	11 96       	adiw	r26, 0x01	; 1
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7efa:	2c 91       	ld	r18, X
    7efc:	11 97       	sbiw	r26, 0x01	; 1
    7efe:	90 e0       	ldi	r25, 0x00	; 0
    7f00:	92 2b       	or	r25, r18
    7f02:	0c 01       	movw	r0, r24
    7f04:	e7 be       	out	0x37, r14	; 55
    7f06:	e8 95       	spm
    7f08:	11 24       	eor	r1, r1
    7f0a:	32 96       	adiw	r30, 0x02	; 2
		addrPtr += 2;
    7f0c:	12 96       	adiw	r26, 0x02	; 2
	    } while (len -= 2);
    7f0e:	ba 12       	cpse	r11, r26

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7f10:	f2 cf       	rjmp	.-28     	; 0x7ef6 <main+0xf6>
    7f12:	fe 01       	movw	r30, r28
	    boot_spm_busy_wait();
    7f14:	d7 be       	out	0x37, r13	; 55
    7f16:	e8 95       	spm
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7f18:	07 b6       	in	r0, 0x37	; 55
    7f1a:	00 fc       	sbrc	r0, 0
    7f1c:	fd cf       	rjmp	.-6      	; 0x7f18 <main+0x118>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f1e:	c7 be       	out	0x37, r12	; 55
    7f20:	e8 95       	spm
      uint8_t desttype;
      GETLENGTH(length);
    7f22:	1e c0       	rjmp	.+60     	; 0x7f60 <main+0x160>
    7f24:	84 37       	cpi	r24, 0x74	; 116
    7f26:	71 f4       	brne	.+28     	; 0x7f44 <main+0x144>

      desttype = getch();
    7f28:	25 d0       	rcall	.+74     	; 0x7f74 <getch>

      verifySpace();
    7f2a:	24 d0       	rcall	.+72     	; 0x7f74 <getch>
    7f2c:	b8 2e       	mov	r11, r24
    7f2e:	22 d0       	rcall	.+68     	; 0x7f74 <getch>
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
    7f30:	35 d0       	rcall	.+106    	; 0x7f9c <verifySpace>
    7f32:	8e 01       	movw	r16, r28
#endif
	    putch(ch);
    7f34:	f8 01       	movw	r30, r16
	} while (--length);
    7f36:	85 91       	lpm	r24, Z+
    7f38:	8f 01       	movw	r16, r30
    7f3a:	15 d0       	rcall	.+42     	; 0x7f66 <putch>
    7f3c:	ba 94       	dec	r11

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f3e:	b1 10       	cpse	r11, r1
    7f40:	f9 cf       	rjmp	.-14     	; 0x7f34 <main+0x134>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f42:	0e c0       	rjmp	.+28     	; 0x7f60 <main+0x160>
    7f44:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    7f46:	39 f4       	brne	.+14     	; 0x7f56 <main+0x156>
    7f48:	29 d0       	rcall	.+82     	; 0x7f9c <verifySpace>
    7f4a:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    7f4c:	0c d0       	rcall	.+24     	; 0x7f66 <putch>
    7f4e:	85 e9       	ldi	r24, 0x95	; 149
    7f50:	0a d0       	rcall	.+20     	; 0x7f66 <putch>
      putch(SIGNATURE_2);
    7f52:	86 e1       	ldi	r24, 0x16	; 22
    7f54:	97 cf       	rjmp	.-210    	; 0x7e84 <main+0x84>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f56:	81 35       	cpi	r24, 0x51	; 81
    7f58:	11 f4       	brne	.+4      	; 0x7f5e <main+0x15e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f5a:	88 e0       	ldi	r24, 0x08	; 8
    7f5c:	19 d0       	rcall	.+50     	; 0x7f90 <watchdogConfig>
    7f5e:	1e d0       	rcall	.+60     	; 0x7f9c <verifySpace>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f60:	80 e1       	ldi	r24, 0x10	; 16
    7f62:	01 d0       	rcall	.+2      	; 0x7f66 <putch>
    }
    putch(STK_OK);
    7f64:	80 cf       	rjmp	.-256    	; 0x7e66 <main+0x66>

00007f66 <putch>:
    7f66:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  }
    7f6a:	95 ff       	sbrs	r25, 5
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f6c:	fc cf       	rjmp	.-8      	; 0x7f66 <putch>
  UART_UDR = ch;
    7f6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f72:	08 95       	ret

00007f74 <getch>:

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7f74:	18 9a       	sbi	0x03, 0	; 3
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f76:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f7a:	87 ff       	sbrs	r24, 7
    7f7c:	fc cf       	rjmp	.-8      	; 0x7f76 <getch+0x2>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f7e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f82:	84 fd       	sbrc	r24, 4
    7f84:	01 c0       	rjmp	.+2      	; 0x7f88 <getch+0x14>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f86:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f88:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7f8c:	18 9a       	sbi	0x03, 0	; 3
#endif
#endif

  return ch;
}
    7f8e:	08 95       	ret

00007f90 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f90:	e0 e6       	ldi	r30, 0x60	; 96
    7f92:	f0 e0       	ldi	r31, 0x00	; 0
    7f94:	98 e1       	ldi	r25, 0x18	; 24
    7f96:	90 83       	st	Z, r25
  WDTCSR = x;
    7f98:	80 83       	st	Z, r24
    7f9a:	08 95       	ret

00007f9c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7f9c:	eb df       	rcall	.-42     	; 0x7f74 <getch>
    7f9e:	80 32       	cpi	r24, 0x20	; 32
    7fa0:	19 f0       	breq	.+6      	; 0x7fa8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fa2:	88 e0       	ldi	r24, 0x08	; 8
    7fa4:	f5 df       	rcall	.-22     	; 0x7f90 <watchdogConfig>
    7fa6:	ff cf       	rjmp	.-2      	; 0x7fa6 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fa8:	84 e1       	ldi	r24, 0x14	; 20
    7faa:	dd cf       	rjmp	.-70     	; 0x7f66 <putch>

00007fac <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fac:	cf 93       	push	r28
    7fae:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fb0:	e1 df       	rcall	.-62     	; 0x7f74 <getch>
    7fb2:	c1 50       	subi	r28, 0x01	; 1
    7fb4:	e9 f7       	brne	.-6      	; 0x7fb0 <getNch+0x4>
  verifySpace();
    7fb6:	cf 91       	pop	r28
    7fb8:	f1 cf       	rjmp	.-30     	; 0x7f9c <verifySpace>

00007fba <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fba:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fbc:	80 e0       	ldi	r24, 0x00	; 0
    7fbe:	e8 df       	rcall	.-48     	; 0x7f90 <watchdogConfig>
    7fc0:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fc2:	ff 27       	eor	r31, r31
    7fc4:	09 94       	ijmp
